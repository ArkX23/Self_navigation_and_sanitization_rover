#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Twist
import socket

class ESP32BridgeNode(Node):
    def __init__(self):
        super().__init__('esp32_bridge')
        self.odom_pub = self.create_publisher(Odometry, '/odom', 10)
        self.cmd_sub = self.create_subscription(
            Twist, '/cmd_vel', self.cmd_callback, 10)
        
        self.udp_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.esp32_ip = "192.168.121.1"
        self.odom_port = 12346
        self.cmd_port = 12347
        self.reset_port = 12348
        self.udp_sock.bind(('', self.odom_port))
        self.udp_sock.settimeout(0.1)
        
        self.create_timer(0.1, self.odom_callback)
        self.get_logger().info('ESP32 bridge started')

    def odom_callback(self):
        try:
            data, _ = self.udp_sock.recvfrom(64)
            x, y, yaw = map(float, data.decode().split(','))
            
            odom = Odometry()
            odom.header.frame_id = 'odom'
            odom.header.stamp = self.get_clock().now().to_msg()
            odom.child_frame_id = 'base_link'
            odom.pose.pose.position.x = x
            odom.pose.pose.position.y = y
            odom.pose.pose.orientation.z = math.sin(yaw / 2.0)
            odom.pose.pose.orientation.w = math.cos(yaw / 2.0)
            self.odom_pub.publish(odom)
        except socket.timeout:
            pass
        except Exception as e:
            self.get_logger().warn(f'Odom error: {e}')

    def cmd_callback(self, msg):
        packet = f"{msg.linear.x:.3f},{msg.angular.z:.3f}"
        try:
            self.udp_sock.sendto(packet.encode(), (self.esp32_ip, self.cmd_port))
        except Exception as e:
            self.get_logger().warn(f'Cmd error: {e}')

def main(args=None):
    rclpy.init(args=args)
    node = ESP32BridgeNode()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
